import random
import time
import traceback

import vk_api
from vk_api import VkUpload
from vk_api.keyboard import VkKeyboard
from vk_api.longpoll import VkLongPoll, VkEventType, Event

from config.logger import logger
from config.settings import VK_BOT_TOKEN, VK_STANDALONE_APP_ID, VK_STANDALONE_APP_TOKEN
from vk_bot.core import keyboards
from vk_bot import models
from vk_bot.core.game import GameProcess, clear_user_game_data, end_game, get_game_results_table

if not VK_BOT_TOKEN:
    raise ValueError('VK_TOKEN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')

if not VK_STANDALONE_APP_ID:
    raise ValueError('VK_STANDALONE_APP_ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')

if not VK_STANDALONE_APP_TOKEN:
    raise ValueError('VK_STANDALONE_APP_TOKEN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')


class NextStep:
    def __init__(self, callback, *args, **kwargs):
        self.callback = callback
        self.args = args
        self.kwargs = kwargs


class VkBot:
    def __init__(self, token):
        self.vk_bot = vk_api.VkApi(token=token)
        self.vk_standalone = vk_api.VkApi(app_id=VK_STANDALONE_APP_ID, token=VK_STANDALONE_APP_TOKEN)
        self.long_poll = VkLongPoll(self.vk_bot)
        self.upload = VkUpload(self.vk_bot)
        self.next_step_users: {str: NextStep} = {}

    def send_message(self, user_id: str, text, keyboard: VkKeyboard = None, photo_attachments: list = None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """

        values = {
            'user_id': user_id,
            'message': text,
            'random_id': random.randint(0, 2048)
        }

        if keyboard:
            values['keyboard'] = keyboard.get_keyboard(),

        if photo_attachments:
            values['attachment'] = ','.join(photo_attachments)
        self.vk_bot.method('messages.send', values)

    def upload_photos(self, photo) -> list:
        response = self.upload.photo_messages(photo)
        attachments = ''
        for img in response:
            owner_id = img['owner_id']
            photo_id = img['id']
            access_key = img['access_key']
            attachments += f'photo{owner_id}_{photo_id}_{access_key},'
        if attachments:
            attachments = attachments[:-1]
        return attachments

    def polling(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –í–∫.
        :return:
        """
        logger.info('–í–∫ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
        for event in self.long_poll.listen():
            event: Event
            try:
                self.event_handling(event)
            except:
                logger.error(traceback.format_exc())
                self.send_message(user_id=event.user_id, text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòû\n\n'
                                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π "–°—Ç–∞—Ä—Ç"Ô∏è\n'
                                                              '–ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã ‚öôÔ∏è')

    def infinity_polling(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç –í–∫ –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
        :return:
        """
        while True:
            try:
                self.polling()
            except KeyboardInterrupt:
                exit(0)
            except Exception as e:
                time.sleep(1)
                continue

    def get_user(self, event) -> models.VkUser:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        vk_user = self.vk_bot.method("users.get", {"user_ids": event.user_id})
        fullname = vk_user[0]['first_name'] + ' ' + vk_user[0]['last_name']
        try:
            user_object = models.VkUser.objects.get(chat_id=event.user_id)
        except models.VkUser.DoesNotExist:
            user_object = models.VkUser.objects.create(chat_id=event.user_id, name=fullname)
        return user_object

    def register_next_step_by_user_id(self, user_id, callback, *args, **kwargs):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç –ø–æ user_id.
        """
        next_step = NextStep(callback, *args, **kwargs)
        self.next_step_users[user_id] = next_step

    def register_next_step(self, event, callback, *args, **kwargs):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç.
        """
        user_id = event.user_id
        self.register_next_step_by_user_id(user_id, callback, *args, **kwargs)

    def processing_next_step(self, event, user):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤
        """
        user_id = event.user_id
        if self.next_step_users.get(user_id):
            next_step = self.next_step_users[user_id]
            del self.next_step_users[user_id]
            next_step.callback(event, user, *next_step.args, **next_step.kwargs)
            return True

    def event_handling(self, event):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞.
        """
        if event.to_me:
            user = self.get_user(event)
            logger.info(f'New event [user: {user}, type: {event.type}]: "{event.text}"')
            if self.processing_next_step(event, user):
                return
            elif event.type == VkEventType.MESSAGE_NEW:
                self.message_processing(event, user)

    def message_processing(self, event, user: models.VkUser):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        """

        event_text = event.text

        if event_text.lower() in ['–Ω–∞—á–∞—Ç—å', 'start']:
            collection = models.Collection.objects.filter(standard=True).first()
            if not collection:
                self.send_message(user_id=user.chat_id, text='–ß–∞—Ç –±–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòâ')

            user.current_game = models.Game.objects.create(single=True, status='creating', stage='getting_answers',
                                                           creator=user)
            self.start_single_game(user=user, collection=collection, start_text='–ü—Ä–∏–≤–µ—Ç!\n'
                                                                                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤—Ç—å –≤ —á–∞—Ç –±–æ—Ç–∞ —Å –∏–≥—Ä–æ–π "–ò–º–∞–¥–∂–∏–Ω–∞—Ä–∏—É–º"\n\n'
                                                                                '–ó–∞–¥–∞—á–∞ –∏–≥—Ä—ã - —É–≥–∞–¥–∞—Ç—å –∫–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —è –∑–∞–≥–∞–¥–∞–ª\n'
                                                                                '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ —Å–ª–æ–≤–æ '
                                                                                '(–Ω–æ–º–µ—Ä–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å –ª–µ–≤–∞ –Ω–∞ –ø—Ä–∞–≤–æ)\n\n'
                                                                                '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –≤ –∫–æ–ª–æ–¥–µ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è –∫–∞—Ä—Ç—ã')
            return

        current_game = user.current_game
        if current_game and current_game.status != 'creating':
            self.game_execution(user=user, game=current_game, event_text=event_text)
            return

        if event_text.lower() == '–æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞':
            user.current_game = models.Game.objects.create(single=True, status='creating', stage='getting_answers',
                                                           creator=user)
            user.save()
            self.send_message(user_id=user.chat_id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                              keyboard=keyboards.get_select_collection_keyboard())

        elif event_text.lower() == '–º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä':
            # self.send_in_development_message(user)

            self.send_message(user_id=user.chat_id,
                              text='–ú—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä',
                              keyboard=keyboards.get_multiplayer_keyboard())

        elif event_text.lower() == '–Ω–∞–π—Ç–∏ –∏–≥—Ä—É':
            games = models.Game.objects.filter(status__in=['waiting', 'started'], single=False)[:5]

            if not games:
                self.send_message(user_id=user.chat_id,
                                  text=f'–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä üíÅ‚Äç‚ôÇÔ∏è\n'
                                       f'–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é üòâ')

            for game in games:
                self.send_message(user_id=user.chat_id,
                                  text=f'–ò–≥—Ä–∞ #{game.id}\n'
                                       f'–°—Ç–∞—Ç—É—Å: {game.status}\n'
                                       f'–ò–≥—Ä–æ–∫–∏: {game.users.count()}',
                                  keyboard=keyboards.get_connect_to_game_keyboard(game.id))
        elif '–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ ' in event_text.lower():
            try:
                game_id = int(event_text.split('#')[-1])
            except:
                self.send_message(user_id=user.chat_id,
                                  text=f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–≥—Ä—É',
                                  keyboard=keyboards.get_main_menu_keyboard())
                return

            game = models.Game.objects.filter(id=game_id, status__in=['waiting', 'started'], single=False).first()
            if not game:
                self.send_message(user_id=user.chat_id,
                                  text=f'–ü–æ—Ö–æ–∂–µ –∏–≥—Ä–∞ –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å',
                                  keyboard=keyboards.get_multiplayer_keyboard())
                return

            self.connect_to_game(user=user, game=game)

        elif event_text.lower() == '—Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É':
            user.current_game = models.Game.objects.create(single=False, status='creating', stage='getting_answers',
                                                           creator=user)
            user.save()
            self.send_message(user_id=user.chat_id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                              keyboard=keyboards.get_select_collection_keyboard())

        elif event_text.lower() == '—Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É —Å –≤–µ–¥—É—â–∏–º':
            user.current_game = models.Game.objects.create(single=False, with_host=True, status='creating',
                                                           stage='getting_answers',
                                                           creator=user)
            user.save()
            self.send_message(user_id=user.chat_id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                              keyboard=keyboards.get_select_collection_keyboard())

        elif event_text.lower() == '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è':
            collection = models.Collection.objects.filter(standard=True).first()
            if user.current_game.single:
                self.start_single_game(user, collection=collection)
            else:
                self.start_multiplayer_game(user, collection=collection)

        elif event_text.lower() == '–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ—é':
            self.send_message(user_id=user.chat_id,
                              text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–ª—å–±–æ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏', keyboard=keyboards.get_back_keyboard())
            self.register_next_step(event, self.choosing_collection_by_url_step)

        elif event_text.lower() == '–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é':
            clear_user_game_data(user=user)
            self.send_message(user_id=user.chat_id,
                              text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é',
                              keyboard=keyboards.get_main_menu_keyboard())

        else:
            self.send_not_understand_message(user)

    def send_in_development_message(self, user):
        self.send_message(user_id=user.chat_id, text=f'–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üîß')

    def send_not_understand_message(self, user):
        self.send_message(user_id=user.chat_id, text=f'–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª üôà\n'
                                                     f'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–πüòâ',
                          keyboard=keyboards.get_main_menu_keyboard())

    def start_single_game(self, user, collection: models.Collection, start_text: str = '–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É! üòé'):
        game = user.current_game
        game.collection = collection
        game.status = 'started'
        game.save()

        user.current_score = 0
        user.save()

        game_process = GameProcess(game=game)
        game_circle = game_process.start_circle()

        self.send_message(user_id=user.chat_id, text=start_text,
                          photo_attachments=game_circle.attachment_data)
        self.send_message(user_id=user.chat_id, text=game_circle.word,
                          keyboard=keyboards.get_answers_keyboard())

    def start_multiplayer_game(self, user, collection: models.Collection):
        game = user.current_game
        game.collection = collection
        game.status = 'waiting'
        game.save()

        user.current_score = 0
        user.save()

        self.send_message(user_id=user.chat_id, text='–í—Å—ë –≥–æ—Ç–æ–≤–æ üòé\n'
                                                     '–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –∫–æ–≥–¥–∞ –∫ –Ω–µ–π –∫—Ç–æ-—Ç–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è',
                          keyboard=keyboards.get_leave_game_keyboard())

        self.send_message(user_id=user.chat_id, text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É —á–µ–ª–æ–≤–µ–∫—É, '
                                                     '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –í–∫ –≤ —á–∞—Ç')

    def game_execution(self, user, game, event_text):
        if game.status == 'waiting':
            self.game_waiting(user=user, game=game, event_text=event_text)
            return

        if game.single:
            if event_text.lower() == '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã':
                self.send_message(user_id=user.chat_id, text=f'–í–∞—à —Å—á–µ—Ç –≤ —ç—Ç–æ–π –∏–≥—Ä–µ: {user.current_score} ‚úÖ',
                                  keyboard=keyboards.get_next_circle_keyboard())
                return
            elif event_text.lower() == '–∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É':
                self.send_message(user_id=user.chat_id, text=f'–ò–≥—Ä–∞ –∑–≤–µ—Ä—à–µ–Ω–∞\n'
                                                             f'–í–∞—à —Å—á–µ—Ç: {user.current_score} ‚úÖ',
                                  keyboard=keyboards.get_main_menu_keyboard())
                end_game(game)
                return
        else:
            if event_text.lower() == '—Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤':
                self.send_message(user_id=user.chat_id, text=get_game_results_table(game=game, user=user),
                                  keyboard=keyboards.get_wait_circle_keyboard())
                return
            elif event_text.lower() == '–ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É':
                self.send_message(user_id=user.chat_id, text=f'–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É\n\n'
                                                             f'{get_game_results_table(game=game, user=user)}',
                                  keyboard=keyboards.get_main_menu_keyboard())
                if game.users.count() <= 1:
                    end_game(game)
                else:
                    clear_user_game_data(user)
                return

            if game.users.count() <= 1:
                self.send_message(user_id=user.chat_id, text=f'–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã—à–ª–∏\n\n'
                                                             f'{get_game_results_table(game=game, user=user)}',
                                  keyboard=keyboards.get_main_menu_keyboard())
                end_game(game)
                return
        # == –∏–≥—Ä–∞ —Å –≤–µ–¥—É—â–∏–º
        if game.stage == 'game_host_writing_word':
            if user.is_game_host:
                try:
                    user.sent_card = user.cards_in_hand.all()[int(event_text) - 1]
                    user.save()
                except:
                    photo_attachments = [image.attachment_data for image in user.cards_in_hand.all()]
                    self.send_message(user_id=user.chat_id,
                                      text=f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
                                      photo_attachments=photo_attachments,
                                      keyboard=keyboards.get_answers_keyboard(count=len(photo_attachments)))
                    return
                self.send_message(user_id=user.chat_id,
                                  text=f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±–æ–∑–Ω–∞—á–µ—Ç —Ç–æ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ')
                game.current_images.add(user.sent_card)
                game.stage = 'sending_word'
                game.save()
            else:
                self.send_message(user_id=user.chat_id, text='–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –≤–µ–¥—É—â–∏–π –∑–∞–≥–∞–¥–∞–µ—Ç —Å–ª–æ–≤–æ',
                                  keyboard=keyboards.get_wait_circle_keyboard())
            return

        elif game.stage == 'sending_word':
            if user.is_game_host:
                game.stage = 'send_cards'
                game.current_word = event_text

                self.send_message(user_id=user.chat_id, text='–û—Ç–ª–∏—á–Ω–æ!\n'
                                                             '–¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –≤—Å–µ —Å–¥–µ–ª–∞—é—Ç —Å–≤–æ–π —Ö–æ–¥',
                                  keyboard=keyboards.get_wait_circle_keyboard())

                for game_user in game.users.exclude(is_game_host=True):
                    self.send_message(user_id=game_user.chat_id,
                                      text=f'–í–µ–¥—É—â–∏–π –∑–∞–≥–∞–¥–∞–ª: {game.current_word}')
                    photo_attachments = [image.attachment_data for image in game_user.cards_in_hand.all()]
                    self.send_message(user_id=game_user.chat_id,
                                      text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –∞—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —É –≤–∞—Å —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º',
                                      photo_attachments=photo_attachments,
                                      keyboard=keyboards.get_answers_keyboard(count=len(photo_attachments)))

                game.save()
            return

        elif game.stage == 'send_cards':
            if user.is_game_host:
                self.send_message(user_id=user.chat_id, text='–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –≤—Å–µ —Å–¥–µ–ª–∞—é—Ç —Å–≤–æ–π —Ö–æ–¥',
                                  keyboard=keyboards.get_wait_circle_keyboard())
                return
            else:
                try:
                    user.sent_card = user.cards_in_hand.all()[int(event_text) - 1]
                    user.save()
                except:
                    photo_attachments = [image.attachment_data for image in user.cards_in_hand.all()]
                    self.send_message(user_id=user.chat_id,
                                      text=f'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
                                      photo_attachments=photo_attachments,
                                      keyboard=keyboards.get_answers_keyboard(count=len(photo_attachments)))
                    return

                game.current_images.add(user.sent_card)
                game.save()

                self.send_message(user_id=user.chat_id, text='–û—Ç–ª–∏—á–Ω–æ!\n'
                                                             '–¢–µ–ø–µ—Ä—å –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –≤—Å–µ —Å–¥–µ–ª–∞—é—Ç —Å–≤–æ–π —Ö–æ–¥',
                                  keyboard=keyboards.get_wait_circle_keyboard())

                # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç
                if game.current_images.count() >= game.users.filter(is_game_host=False).count():
                    photo_attachments = [image.attachment_data for image in game.current_images.all()]
                    random.shuffle(photo_attachments, random.random)
                    game.current_attachment_data = photo_attachments

                    for game_user in game.users.all():
                        if game_user.is_game_host:
                            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É —é–∫–∞—Ä—Ç—É –∑–∞–≥–∞–¥–∞–ª–∏
                            game.current_correct_answer = \
                                photo_attachments.index(game_user.sent_card.attachment_data) + 1
                            self.send_message(user_id=game_user.chat_id,
                                              text=f'–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∫–∞—Ä—Ç',
                                              photo_attachments=photo_attachments,
                                              keyboard=keyboards.get_wait_circle_keyboard())
                        else:
                            self.send_message(user_id=game_user.chat_id,
                                              text=f'–û—Ç–¥–∞–≥–∞–π—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –∫–∞—Ä—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ',
                                              photo_attachments=photo_attachments,
                                              keyboard=keyboards.get_answers_keyboard(count=len(photo_attachments)))
                    game.stage = 'getting_answers'
                    game.save()
            return

        # ==

        # –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
        if not game.single and user.answered:
            self.send_message(user_id=user.chat_id, text='–°–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥ –Ω–∞—á–Ω–µ—Ç—Å—è, '
                                                         '–∫–æ–≥–¥–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç—è—Ç',
                              keyboard=keyboards.get_wait_circle_keyboard())
            return

        if game.stage == 'getting_answers':
            self.getting_game_answers(game=game, user=user, event_text=event_text)
            return

        if game.stage == 'distribution_of_cards':
            self.distribution_of_cards_in_game(game=game, users=[user])
            return

    def game_waiting(self, user, game, event_text):
        """
        –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
        """
        if event_text.lower() == '–ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É':
            self.send_message(user_id=user.chat_id, text=f'–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É')
            if game.users.count() <= 1:
                end_game(game)
            else:
                clear_user_game_data(user)
            return

        if 'vk.com' in event_text:
            self.invite_person_by_link(game=game, user=user, inviting_person_url=event_text)
            return
        elif event_text.lower() == '–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É':
            game.status = 'started'
            game.save()
            if game.with_host:
                game_process = GameProcess(game=game)
                game_process.init_game_with_host()
                self.game_host_move(game=game, start_game=True)
            else:
                self.distribution_of_cards_in_game(game=game, users=game.users.all(), next_circle_text='–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!')
            return

    def invite_person_by_link(self, game, user, inviting_person_url: str):
        """
        –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∏–≥—Ä—É
        """
        try:
            inviting_person_username = \
                inviting_person_url[inviting_person_url.find('vk.com/') + len('vk.com/'):].split('/')[0]
            inviting_person_vk = self.vk_bot.method("users.get", {'user_ids': inviting_person_username})[0]
            inviting_person = models.VkUser.objects.get(chat_id=inviting_person_vk['id'])
        except:
            logger.error(traceback.format_exc())
            self.send_message(user_id=user.chat_id, text=f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞')
            return

        if inviting_person.current_game:
            self.send_message(user_id=user.chat_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inviting_person.name} '
                                                         f'—Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∏–≥—Ä–µ')
            return

        self.send_message(user_id=inviting_person.chat_id,
                          text=f'{user.name} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –Ω–∞ –∏–≥—Ä—É #{game.id}\n'
                               f'–°—Ç–∞—Ç—É—Å: {game.status}\n'
                               f'–ò–≥—Ä–æ–∫–∏: {game.users.count()}',
                          keyboard=keyboards.get_connect_to_game_keyboard(game.id))

        self.send_message(user_id=user.chat_id, text=f'–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '
                                                     f'{inviting_person.name}')

    def getting_game_answers(self, game, user, event_text):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
        """
        if event_text not in ['1', '2', '3', '4', '5']:
            self.send_message(user_id=user.chat_id, text='–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5',
                              keyboard=keyboards.get_answers_keyboard())
            return
        user_answer = int(event_text)

        if game.with_host:
            if user.answered:
                self.send_message(user_id=user.chat_id, text='–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n'
                                                             '–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –≤—Å–µ –¥–∞–¥—É—Ç —Å–≤–æ–π –æ—Ç–≤–µ—Ç',
                                  keyboard=keyboards.get_answers_keyboard())
                return

            user.answer = user_answer
            user.answered = True
            user.save()

            self.send_message(user_id=user.chat_id, text='–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n'
                                                         '–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—Å–µ –¥–∞–¥—É—Ç —Å–≤–æ–π –æ—Ç–≤–µ—Ç',
                              keyboard=keyboards.get_answers_keyboard())

            # –µ—Å–ª–∏ –≤—Å–µ –¥–∞–ª–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç
            if game.users.filter(answered=True).count() >= game.users.exclude(is_game_host=True).count():
                game_users = game.users.all()
                game_current_attachment_data = game.current_attachment_data

                host_card_answers_count = 0
                users_card_answers = {}

                for attachment_data, answer in zip(game_current_attachment_data,
                                                   range(1, len(game_current_attachment_data) + 1)):

                    image = models.Image.objects.get(attachment_data=attachment_data)
                    image_user = game_users.get(sent_card=image)
                    answers_count = game_users.exclude(is_game_host=True).filter(answer=answer).count()

                    if image_user.is_game_host:
                        host_card_answers_count += answers_count
                    else:
                        if not users_card_answers.get(image_user):
                            users_card_answers[image_user] = 0
                        users_card_answers[image_user] += answers_count

                if host_card_answers_count == 0 \
                        or host_card_answers_count >= game_users.exclude(is_game_host=True).count():
                    for game_user in game_users:
                        if game_user.is_game_host:
                            users_card_answers[game_user] = 0
                            continue
                        game_user.current_score += 2
                        users_card_answers[game_user] = 2
                        game_user.save()
                else:
                    for game_user in game_users:
                        if game_user.is_game_host:
                            game_user.current_score += 2
                            users_card_answers[game_user] = 2
                        else:
                            game_user.current_score += users_card_answers[game_user]
                        game_user.save()

                users_card_answers_table = ''
                for game_user, score in users_card_answers.items():
                    users_card_answers_table += f'\n{game_user} {score}'

                won_user = None
                for game_user in game_users:
                    if game_user.current_score >= 40:
                        won_user = game_user

                    self.send_message(user_id=game_user.chat_id,
                                      text=f'–ë–∞–ª–ª—ã –≤ —ç—Ç–æ–º –∫—Ä—É–≥–µ:\n {users_card_answers_table}\n\n'
                                           f'{get_game_results_table(game=game, user=game_user)}\n\n'
                                           f'–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ üòâ')

                    game_user.cards_in_hand.remove(game_user.sent_card)
                    game_user.is_game_host = False
                    game_user.answered = False
                    game_user.sent_card = None
                    game_user.answer = None
                    game_user.save()

                if won_user:
                    end_game(game=game)
                    for game_user in game_users:
                        self.send_message(user_id=game_user.chat_id,
                                          text=f'–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'
                                               f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {won_user.name} ü•≥',
                                          keyboard=keyboards.get_main_menu_keyboard())

                    return

                game_process = GameProcess(game=game)
                game_process.give_game_users_one_card()
                self.game_host_move(game)

            return



        else:
            if user.current_game.current_correct_answer == user_answer:
                message_text = '–í—ã —É–≥–∞–¥–∞–ª–∏! ü•≥\n' \
                               '–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 3 –±–∞–ª–ª–∞'
                user.current_score += 3
            else:
                message_text = '–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ ü§∑‚Äç‚ôÇÔ∏è\n' \
                               '–í —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –≤—ã –Ω–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ –æ—á–∫–æ–≤'

            message_text += f'\n\n–í–∞—à —Å—á–µ—Ç –≤ —ç—Ç–æ–π –∏–≥—Ä–µ: {user.current_score} ‚úÖ'
            if game.single:
                self.send_message(user_id=user.chat_id, text=message_text,
                                  keyboard=keyboards.get_next_circle_keyboard())
            else:
                self.send_message(user_id=user.chat_id, text=message_text)
                self.send_message(user_id=user.chat_id, text='–°–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥ –Ω–∞—á–Ω–µ—Ç—Å—è, '
                                                             '–∫–æ–≥–¥–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç—è—Ç',
                                  keyboard=keyboards.get_wait_circle_keyboard())

            user.answered = True
            user.save()

            if not game.single and game.users.all().count() == game.users.filter(answered=True).count():
                self.distribution_of_cards_in_game(game=game, users=game.users.all())
                return

            if game.single:
                game.stage = 'distribution_of_cards'
                game.save()

    def distribution_of_cards_in_game(self, game, users, next_circle_text='–°–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–≥'):
        game.stage = 'getting_answers'
        game.save()

        game_process = GameProcess(game=game)
        game_circle = game_process.start_circle()

        need_end_game = False
        for game_user in users:
            game_user.answered = False

            if not game_circle:
                if game.single:
                    self.send_message(user_id=game_user.chat_id, text=f'–ò–≥—Ä–∞ –∑–≤–µ—Ä—à–µ–Ω–∞!\n'
                                                                      f'–í–∞—à —Å—á–µ—Ç: {game_user.current_score} ‚úÖ\n\n'
                                                                      f'–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ üòâ',
                                      keyboard=keyboards.get_main_menu_keyboard())
                else:
                    self.send_message(user_id=game_user.chat_id, text=f'–ò–≥—Ä–∞ –∑–≤–µ—Ä—à–µ–Ω–∞!\n'
                                                                      f'{get_game_results_table(game=game, user=game_user)}\n\n'
                                                                      f'–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ üòâ',
                                      keyboard=keyboards.get_main_menu_keyboard())
                need_end_game = True

                continue
            if not need_end_game:
                self.send_message(user_id=game_user.chat_id, text=next_circle_text,
                                  photo_attachments=game_circle.attachment_data)
                self.send_message(user_id=game_user.chat_id, text=game_circle.word,
                                  keyboard=keyboards.get_answers_keyboard())
                game_user.save()

        if need_end_game:
            end_game(game)

    def choosing_collection_by_url_step(self, event, user: models.VkUser):
        event_text = event.text

        if event_text == '–Ω–∞–∑–∞–¥':
            self.send_message(user_id=event.user_id, text='–¢–æ–≥–¥–∞ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑üòä')
            self.send_message(user_id=event.user_id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
                              keyboard=keyboards.get_select_collection_keyboard())
            return

        album_url = event_text

        try:
            album_images = self.get_album_images(album_url=event_text)
        except:
            self.send_message(user_id=event.user_id,
                              text='–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∞–ª—å–±–æ–º–∞\n'
                                   '–£–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞, –ª–∏–±–æ –∞–ª—å–±–æ–º —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º\n\n'
                                   '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–ª—å–±–æ–º',
                              keyboard=keyboards.get_back_keyboard())
            self.register_next_step(event, self.choosing_collection_by_url_step)
            return

        album_images_count = len(album_images)
        if album_images_count < 6:
            self.send_message(user_id=event.user_id,
                              text='–í —ç—Ç–æ–º –∞–ª—å–±–æ–º–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º\n'
                                   '–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–ª—å–±–æ–º', keyboard=keyboards.get_back_keyboard())
            self.register_next_step(event, self.choosing_collection_by_url_step)
            return

        collection = models.Collection.objects.get_or_create(standard=False, album_url=album_url)[0]

        if collection.images.count() != album_images_count:
            collection.images.all().delete()

            for album_image in album_images:
                owner_id = album_image['owner_id']
                photo_id = album_image['id']

                photo_text: str = album_image['text']
                if not photo_text:
                    continue
                words = photo_text.lower().split()

                image = collection.images.create(
                    attachment_data=f'photo{owner_id}_{photo_id}'
                )

                image_words = [models.ImageWord(image=image, name=word) for word in words]
                models.ImageWord.objects.bulk_create(image_words)

        if user.current_game.single:
            self.start_single_game(user, collection=collection)
        else:
            self.start_multiplayer_game(user, collection=collection)

    def get_album_images(self, album_url):
        album_id = album_url.split('/')[-1].split('_')[1]
        owner_id = album_url.split('/')[-1].split('_')[0].replace('album', '')

        values = {
            'owner_id': owner_id,
            'album_id': album_id
        }

        album_images = self.vk_standalone.method('photos.get', values)['items']
        album_images = [album_image for album_image in album_images if album_image['text']]
        return album_images

    def connect_to_game(self, user, game):
        user.current_game = game
        user.current_score = 0
        user.answered = False
        user.save()

        game_process = GameProcess(game=game)
        game_circle = game_process.get_current_circle()

        self.send_message(user_id=user.chat_id, text=f'–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ #{game.id}',
                          photo_attachments=game_circle.attachment_data)

        if game.status == 'started':
            self.send_message(user_id=user.chat_id, text=game_circle.word,
                              keyboard=keyboards.get_answers_keyboard())
        else:
            self.send_message(user_id=user.chat_id, text='–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã\n\n',
                              keyboard=keyboards.get_start_multiplayer_game_keyboard())
            self.send_message(user_id=user.chat_id, text='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–≥—Ä—É —á–µ–ª–æ–≤–µ–∫—É, '
                                                         '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å –í–∫ –≤ —á–∞—Ç')

            self.send_message(user_id=game.creator.chat_id, text=f'–ö –∏–≥—Ä–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è {user.name}',
                              keyboard=keyboards.get_start_multiplayer_game_keyboard())

    def game_host_move(self, game: models.Game, start_game=False):
        game_users = game.users.all()
        host = game.users.filter(was_game_circle_host=False).first()
        if not host:
            game.users.update(was_game_circle_host=False)
            host = game_users.first()
        host.is_game_host = True
        host.was_game_circle_host = True
        host.save()

        for user in game_users:
            if start_game:
                self.send_message(user_id=user.chat_id, text='–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!')
            else:
                self.send_message(user_id=user.chat_id, text='–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–≥!')

            photo_attachments = [image.attachment_data for image in user.cards_in_hand.all()]

            if user == host:
                self.send_message(user_id=user.chat_id, text=f'–í—ã –≤–µ–¥—É—â–∏–π —ç—Ç–æ–≥–æ –∫—Ä—É–≥–∞\n'
                                                             f'–ó–∞–≥–∞–¥–∞–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç',
                                  photo_attachments=photo_attachments,
                                  keyboard=keyboards.get_answers_keyboard(count=len(photo_attachments)))
            else:
                self.send_message(user_id=user.chat_id, text=f'–í–∞—à–∏ –∫–∞—Ä—Ç—ã\n\n'
                                                             f'–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –≤–µ–¥—É—â–∏–π –∑–∞–≥–∞–¥–∞–µ—Ç —Å–ª–æ–≤–æ',
                                  photo_attachments=photo_attachments,
                                  keyboard=keyboards.get_wait_circle_keyboard())

        game.current_images.set([])
        game.current_attachment_data = None
        game.current_correct_answer = None
        game.current_word = ''
        game.stage = 'game_host_writing_word'
        game.save()

    def game_host_writing_word(self, game: models.Game, host):
        host = game.users.filter(is_game_host=True).first()
        if not host:
            self.game_host_move(host)
        self.send_message(user_id=host.chat_id, text=f'–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±–æ–∑–Ω–∞—á–µ—Ç —Ç–æ, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ')

    def distribution_of_cards_in_game_with_host(self, game, event_text):
        pass


bot = VkBot(VK_BOT_TOKEN)
